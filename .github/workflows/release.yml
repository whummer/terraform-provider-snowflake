#name: Release
#
#on:
#  push:
#    branches:
#      - main
#    tags: # Trigger on new tags that follow semantic versioning with `v` prefix (supports any postfix, e.g. `-rc1`)
#      - 'v[0-9]+.[0-9]+.[0-9]+(-.+)?'
#
#jobs:
#  release-please:
#    environment: release
#    runs-on: macos-latest
#    steps:
#      - uses: actions/github-script@v6
#        id: configure-changelog
#        with:
#          result-encoding: string
#          script: |
#            const changelogTypes = [
#              {type: "feat", section: "🎉 **What's new:**", hidden: false},
#              {type: "chore", section: "🔧 **Misc**", hidden: false},
#              {type: "fix", section: "🐛 **Bug fixes:**", hidden: false},
#            ]
#            return JSON.stringify(changelogTypes)
#
#      # See https://docs.github.com/en/actions/security-guides/automatic-token-authentication#using-the-github_token-in-a-workflow
#      # For why we need to generate a token and not use the default
#      - name: Create token
#        id: create-token
#        uses: actions/create-github-app-token@v1
#        with:
#          app-id: ${{ secrets.APP_ID }}
#          private-key: ${{ secrets.APP_PRIVATE_KEY }}
#
#      - name: Import GPG key
#        id: import_gpg
#        run: |
#          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import --no-tty --yes
#          fingerprint=$(gpg --list-secret-keys --with-colons | awk -F: '$1 == "fpr" {print $10}' | head -n 1)
#
#          if [[ -z "$fingerprint" ]]; then
#            echo "Error: Failed to extract GPG fingerprint."
#            exit 1
#          fi
#
#          echo "fingerprint=$fingerprint" >> "$GITHUB_OUTPUT"
#
#      - name: Release please
#        uses: googleapis/release-please-action@db8f2c60ee802b3748b512940dde88eabd7b7e01 # v3
#        id: release
#        with:
#          release-type: simple
#          bump-minor-pre-major: true
#          changelog-types: ${{ steps.configure-changelog.outputs.result }}
#          token: ${{ steps.create-token.outputs.token }}
#
#      - uses: actions/checkout@v4
#        if: ${{ steps.release.outputs.releases_created }}
#        # we need to fetch all history and tags
#        # so we build the proper version
#        with:
#          persist-credentials: false
#          fetch-depth: 0
#
#      - uses: actions/setup-go@v5
#        if: ${{ steps.release.outputs.releases_created }}
#        with:
#          go-version-file: ./go.mod
#
#      - name: Run GoReleaser
#        if: ${{ steps.release.outputs.releases_created }}
#        uses: goreleaser/goreleaser-action@5742e2a039330cbb23ebf35f046f814d4c6ff811 # v5
#        with:
#          version: latest
#          args: release --clean --verbose
#        env:
#          GITHUB_TOKEN: ${{ steps.create-token.outputs.token }}
#          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
#          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
